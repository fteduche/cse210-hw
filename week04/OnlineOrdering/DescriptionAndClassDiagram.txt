Class Diagram for youtube program
+---------------+
|    Comment    |
+---------------+
| - _name: string  |
| - _text: string   |
| - _date: DateTime|
+---------------+
| + Comment(name: string, text: string) |
| + GetName(): string          |
| + GetText(): string          |
| + GetDate(): DateTime       |
+---------------+

+---------------+
|      Video    |
+---------------+
| - _title: string        |
| - _author: string       |
| - _length: int          |
| - _comments: List<Comment>|
| - _views: int           |
| - _likes: int           |
+---------------+
| + Video(title: string, author: string, length: int)|
| + AddComment(comment: Comment)|
| + GetCommentsCount(): int|
| + DisplayComments()    |
| + View()                |
| + Like()                |
| + DisplayDetails()      |
+---------------+

+---------------+
|     Program    |
+---------------+
| (no fields)    |
+---------------+
| + Main(args: string[]) |
| + CreateVideos(): List<Video>|
| + DisplayVideoDetails(video: Video) |
+---------------++---------------+
|     Program    |
+---------------+
| (no fields)    |
+---------------+
| + Main(args: string[]) |
| + CreateVideos(): List<Video>|
| + DisplayVideoDetails(video: Video) |
+---------------+


This class diagram illustrates the structure and relationships of the classes in the program:

- The Comment class represents a comment and has properties for _name, _text, and _date. It also has a constructor to create a new comment, and methods to retrieve the name, text, and date of the comment.
- The Video class represents a video and has properties for _title, _author, _length, _comments, _views, and _likes. It also has methods to add comments, get the comment count, display comments, view the video, like the video, and display the video's details.
- The Program class is the main entry point of the program and contains the Main method, which is responsible for creating instances of the Video class and demonstrating their functionality.

The relationships between the classes are as follows:

- A Video can have multiple `Comment`s.
- The Program class uses instances of the Video class.

Overall, this class diagram provides a clear and concise representation of the structure and relationships of the classes in the program.


Class diagram for OnlineOrdering program

+---------------+
|     Address   |
+---------------+
| - _streetAddress: string  |
| - _city: string             |
| - _stateProvince: string   |
| - _country: string          |
| - _postalCode: string       |
+---------------+
| + Address(streetAddress: string,  |
|     city: string, stateProvince: string,|
|     country: string, postalCode: string) |
| + IsUSA(): bool               |
| + GetFullAddress(): string    |
+---------------+

+---------------+
|    Customer   |
+---------------+
| - _name: string             |
| - _address: Address          |
| - _email: string            |
| - _phoneNumber: string      |
+---------------+
| + Customer(name: string, address: Address,|
|     email: string, phoneNumber: string)    |
| + IsUSACustomer(): bool     |
| + GetName(): string          |
| + GetAddress(): Address      |
| + GetEmail(): string         |
| + GetPhoneNumber(): string    |
+---------------+

+---------------+
|     Product   |
+---------------+
| - _name: string             |
| - _productId: string        |
| - _price: decimal           |
| - _quantity: int             |
| - _description: string       |
+---------------+
| + Product(name: string, productId: string,|
|     price: decimal, quantity: int, description: string)|
| + GetTotalCost(): decimal   |
| + GetName(): string          |
| + GetProductId(): string     |
| + GetDescription(): string   |
+---------------+

+---------------+
|      Order    |
+---------------+
| - _products: List<Product>  |
| - _customer: Customer       |
| - _taxRate: decimal         |
+---------------+
| + Order(customer: Customer, taxRate: decimal)|
| + AddProduct(product: Product)|
| + GetSubtotal(): decimal    |
| + GetTax(): decimal          |
| + GetTotalCost(): decimal    |
| + GetPackingLabel(): string   |
| + GetShippingLabel(): string  |
| + GetInvoice(): string       |
+---------------+

This class diagram illustrates the structure and relationships of the classes in the program:

- The Address class represents a customer's address and has properties for _streetAddress, _city, _stateProvince, _country, and _postalCode. It also has methods to get the full address (GetFullAddress()) and check if the address is in the USA (IsUSA()).
- The Customer class represents a customer and has properties for _name, _address, _email, and _phoneNumber. It also has methods to get the customer's name (GetName()), address (GetAddress()), email (GetEmail()), and phone number (GetPhoneNumber()), as well as a method to check if the customer is a USA customer (IsUSACustomer()).
- The Product class represents a product and has properties for _name, _productId, _price, _quantity, and _description. It also has methods to get the product's name (GetName()), product ID (GetProductId()), description (GetDescription()), and total cost (GetTotalCost()).
- The Order class represents an order and has properties for _customer, _products, and _taxRate. It also has methods to add products to the order (AddProduct()), get the packing label (GetPackingLabel()), shipping label (GetShippingLabel()), subtotal (GetSubtotal()), tax (GetTax()), total cost (GetTotalCost()), and invoice (GetInvoice()).

The relationships between the classes are as follows:

- A Customer has an Address.
- An Order is placed by a Customer and contains multiple `Product`s.
- The Order class uses the Customer and Product classes to calculate the subtotal, tax, and total cost of the order.